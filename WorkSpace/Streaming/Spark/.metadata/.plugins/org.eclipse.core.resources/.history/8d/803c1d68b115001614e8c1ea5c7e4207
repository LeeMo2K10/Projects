package com.Spark.SparkStreamingEx;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function3;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.State;
import org.apache.spark.streaming.StateSpec;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaMapWithStateDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import scala.Tuple2;

public class JavaStatefulNetworkWordCount implements Serializable {

	static Logger logger = Logger.getLogger(JavaStatefulNetworkWordCount.class);

	@SuppressWarnings("serial")
	public void test() {

		SparkConf conf = new SparkConf().setAppName("JavaStatefulNetworkWordCount").setMaster("local[*]");
		JavaStreamingContext jssc = new JavaStreamingContext(conf, Durations.seconds(1));
		jssc.checkpoint(".");

		List<Tuple2<String, Integer>> tuples = Arrays.asList(new Tuple2<>("Hello", 1), new Tuple2<>("World", 1));
		JavaPairRDD<String, Integer> initialRdd = jssc.sparkContext().parallelizePairs(tuples);
		JavaReceiverInputDStream<String> lines = jssc.socketTextStream("localhost", 9999,
				StorageLevels.MEMORY_AND_DISK);
		JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {

			@Override
			public Iterable<String> call(String t) throws Exception {

				return Arrays.asList(t.split(" "));

			}
		});

		JavaPairDStream<String, Integer> wordsDstream = words.mapToPair(new PairFunction<String, String, Integer>() {

			@Override
			public Tuple2<String, Integer> call(String t) throws Exception {

				return new Tuple2<String, Integer>(t, 1);
			}
		});

		Function3<String, Optional<Integer>, State<Integer>, Tuple2<String, Integer>> mappingFunc = new Function3<String, Optional<Integer>, State<Integer>, Tuple2<String, Integer>>() {
			@Override
			public Tuple2<String, Integer> call(String word, Optional<Integer> one, State<Integer> state) {
				int sum = one.orElse(0) + (state.exists() ? state.get() : 0);
				Tuple2<String, Integer> output = new Tuple2<>(word, sum);
				state.update(sum);
				return output;
			}
		};
		JavaMapWithStateDStream<String, Integer, Integer, Tuple2<String, Integer>> stateDstream = wordsDstream
				.mapWithState(StateSpec.function(mappingFunc).initialState(initialRdd));

	}

}