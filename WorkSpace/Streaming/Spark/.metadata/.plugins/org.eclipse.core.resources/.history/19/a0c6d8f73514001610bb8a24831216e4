package com.Spark.SparkStreamingEx;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaPairInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka.KafkaUtils;

import kafka.serializer.StringDecoder;
import scala.Tuple2;

public class JavaDirectKafkaWordCount {
	String brokers = null;
	String topics = null;

	public void test() {
		SparkConf conf = new SparkConf().setAppName("JavaDirectKafkaWordCount").setMaster("local[*]");
		JavaStreamingContext jssc = new JavaStreamingContext(conf, Durations.seconds(2));
		Set<String> topicSet = new HashSet<String>(Arrays.asList(topics.split(",")));
		Map<String, String> kafkaparams = new HashMap<String, String>();
		kafkaparams.put("metadata.brokers.list", brokers);
		JavaPairInputDStream<String, String> messages = KafkaUtils.createDirectStream(jssc, String.class, String.class,
				StringDecoder.class, StringDecoder.class, kafkaparams, topicSet);
		JavaDStream<String> lines = messages.map(new Function<Tuple2<String, String>, String>() {
			@Override
			public String call(Tuple2<String, String> tuple2) {
				return tuple2._2();
			}
		});

	}

	public static void main(String[] args) {
		String brokers = args[0];
		String topics = args[1];
	}
}
