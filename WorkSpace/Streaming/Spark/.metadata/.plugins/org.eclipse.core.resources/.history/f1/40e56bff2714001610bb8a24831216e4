package com.Spark.SparkStreamingEx;

import java.net.Socket;
import java.util.Arrays;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;

import scala.Tuple2;

public class JavaCustomReceiver extends Receiver<String> {

	public void test() {

		SparkConf conf = new SparkConf().setAppName("JavaCustomReciever").setMaster("local[n]");
		JavaStreamingContext jssc = new JavaStreamingContext(conf, new Duration(1000));
		JavaReceiverInputDStream<String> lines = jssc.receiverStream(
			      new JavaCustomReceiver("localhost", 9999));
		JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {

			public Iterable<String> call(String s) throws Exception {

				return Arrays.asList(s.split(" "));
			}

		});
		JavaPairDStream<String, Integer> pairs = words.mapToPair(new PairFunction<String, String, Integer>() {

			public Tuple2<String, Integer> call(String t) throws Exception {

				return new Tuple2<String, Integer>(t, 1);
			}
		});
		JavaPairDStream<String, Integer> wordsCount = pairs.reduceByKey(new Function2<Integer, Integer, Integer>() {

			public Integer call(Integer v1, Integer v2) throws Exception {

				return v1 + v2;
			}
		});
		wordsCount.print();
		jssc.start();
		jssc.awaitTermination();

	}

	String host = null;
	int port = -1;

	public JavaCustomReceiver(String host, int port) {
		super(StorageLevel.MEMORY_AND_DISK_2());
		this.host = host;
		this.port = port;

	}

	@Override
	public void onStart() {
		new Thread() {
			public void run() {
				recieve();
			}
		}.start();

	}

	protected void recieve() {
		Socket socket=null;
		
	}

	@Override
	public void onStop() {

	}

}
