package com.graphx.pregel;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;

import org.apache.spark.graphx.EdgeTriplet;

import scala.Tuple2;
import scala.collection.Iterator;
import scala.collection.JavaConversions;
import scala.runtime.AbstractFunction1;

public class SendMessageFunction extends
		AbstractFunction1<EdgeTriplet<Integer, Integer>, Iterator<Tuple2<Object, Integer>>> implements Serializable {

	private static final long serialVersionUID = 1L;

	@Override
	public Iterator<Tuple2<Object, Integer>> apply(EdgeTriplet<Integer, Integer> triplet) {

		Integer srcAttr = (Integer) triplet.srcAttr();

		System.out.println("Src Attr : " + srcAttr);

		Integer attr = (Integer) triplet.attr();

		System.out.println("Edge  Attr : " + attr);

		Integer dstAttr = (Integer) triplet.dstAttr();

		System.out.println("Dest Attr : " + dstAttr);

		if (srcAttr + attr < dstAttr)
			return JavaConversions.asScalaIterator(
					Arrays.asList(new Tuple2<Object, Integer>((int) triplet.dstId(), srcAttr + dstAttr)).iterator());
		else
			return JavaConversions.asScalaIterator(Collections.emptyIterator());
	}
}
