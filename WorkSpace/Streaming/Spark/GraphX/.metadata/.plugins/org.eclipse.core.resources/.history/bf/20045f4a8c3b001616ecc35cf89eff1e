package com.spark.graphx;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.log4j.Logger;

import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.graphx.Edge;
import org.apache.spark.graphx.Graph;
import org.apache.spark.graphx.GraphLoader;
import org.apache.spark.graphx.VertexRDD;
import org.apache.spark.storage.StorageLevel;

import scala.Predef;
import scala.Tuple2;
import scala.math.Ordered;
import scala.math.Ordering;
import scala.math.Ordering$;
import scala.reflect.ClassTag;
import scala.reflect.ClassTag$;

public class ExampleApp implements Serializable {

	private static final long serialVersionUID = 1L;

	static Logger log = Logger.getLogger(ExampleApp.class);

	SparkConf conf = new SparkConf().setMaster("local").setAppName("PropertyGraph");
	JavaSparkContext jssc = new JavaSparkContext(conf);

	SparkContext sc = new SparkContext();

	private void getComponents() {

		List<Tuple2<Object, Integer>> vertexlist = new ArrayList<Tuple2<Object, Integer>>();
		vertexlist.add(new Tuple2<Object, Integer>(1L, 22));
		vertexlist.add(new Tuple2<Object, Integer>(3L, 25));

		vertexlist.add(new Tuple2<Object, Integer>(5L, 43));

		vertexlist.add(new Tuple2<Object, Integer>(7L, 42));

		vertexlist.add(new Tuple2<Object, Integer>(9L, 67));

		JavaRDD vertexRdd = jssc.parallelize(vertexlist);

		List edgeList = new ArrayList();
		edgeList.add(new Edge(3, 5, 22));
		edgeList.add(new Edge(5, 3, 25));
		edgeList.add(new Edge(1, 5, 43));
		edgeList.add(new Edge(5, 9, 35));
		edgeList.add(new Edge(7, 3, 35));

		JavaRDD edgeRdd = jssc.parallelize(edgeList);

		Integer defaultuser = 11;

		Graph<Integer, Integer> graph = Graph.apply(vertexRdd.rdd(), edgeRdd.rdd(), defaultuser,
				StorageLevel.MEMORY_ONLY(), StorageLevel.MEMORY_ONLY(), ClassTag$.MODULE$.<Integer>apply(Integer.class),
				ClassTag$.MODULE$.<String>apply(Integer.class));

		Graph<Object, Object> followerGraph = GraphLoader.edgeListFile(jssc, "src/main/resources/Followers.txt", true,
				-1, StorageLevel.MEMORY_AND_DISK(), StorageLevel.MEMORY_AND_DISK());

		JavaPairRDD<Object, Object> users = jssc.textFile("src/main/resources/users.txt", 2).toJavaRDD()
				.mapToPair(lines -> {

					String[] fields = lines.split(",");

					return new Tuple2<Object, Object>(Long.parseLong(fields[0]),
							Arrays.asList(fields).get(fields.length - 1));
				});

		Graph<Object, Object> graph = followerGraph.outerJoinVertices(users.rdd(), new VertexFunction1(),
				ClassTag$.MODULE$.apply(Object.class), ClassTag$.MODULE$.apply(Object.class),
				Predef.$eq$colon$eq$.MODULE$.<Object>tpEquals());

		Graph<Object, Object> subgraph = graph.subgraph(new EdgeFunction(), new VertexFunction());

		Graph<Object, Object> pageRankGraph = subgraph.ops().pageRank(0.001, 0.15);

		VertexRDD<Object> pageRdd = pageRankGraph.vertices();

		Graph<Object, Object> userInfoWithPageRank = subgraph.outerJoinVertices(pageRdd, new VertexFunction1(),
				ClassTag$.MODULE$.apply(Object.class), ClassTag$.MODULE$.apply(Object.class),
				Predef.$eq$colon$eq$.MODULE$.<Object>tpEquals());

		userInfoWithPageRank.vertices().top(5, Ordering$.MODULE$.by(new OrderFunction(), null));

	}

	public static void main(String[] args) {

		ExampleApp app = new ExampleApp();
		app.getComponents();
	}
}
