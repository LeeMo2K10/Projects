package com.biz.Integration;

import backtype.storm.Config;

import backtype.storm.LocalCluster;
import backtype.storm.StormSubmitter;
import backtype.storm.generated.StormTopology;
import backtype.storm.spout.SchemeAsMultiScheme;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.TopologyBuilder;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Tuple;
import storm.kafka.BrokerHosts;
import storm.kafka.KafkaSpout;
import storm.kafka.SpoutConfig;
import storm.kafka.StringScheme;
import storm.kafka.ZkHosts;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

public class KafkaSpoutTestTopology {
	public static final Logger LOG = LoggerFactory.getLogger(KafkaSpoutTestTopology.class);

	public static class PrinterBolt extends BaseBasicBolt {
		public void declareOutputFields(OutputFieldsDeclarer declarer) {

		}

		public void execute(Tuple tuple, BasicOutputCollector collector) {
			System.out.println("_fields -> "+tuple.getFields());
			System.out.println("LIST -> "+tuple.getFields());

			LOG.info(tuple.toString());
		}

	}

	private final BrokerHosts brokerHosts;

	public KafkaSpoutTestTopology(String kafkaZookeeper) {
		brokerHosts = new ZkHosts(kafkaZookeeper);
	}

	public StormTopology buildTopology() {
		SpoutConfig kafkaConfig = new SpoutConfig(brokerHosts, "test1", "", "storm");
		kafkaConfig.scheme = new SchemeAsMultiScheme(new StringScheme());
		TopologyBuilder builder = new TopologyBuilder();
		builder.setSpout("words", new KafkaSpout(kafkaConfig), 10);
		builder.setBolt("print", new PrinterBolt()).shuffleGrouping("words");
		return builder.createTopology();
	}

	public static void main(String[] args) throws Exception {

		String kafkaZk = "192.168.1.193:2181";
		KafkaSpoutTestTopology kafkaSpoutTestTopology = new KafkaSpoutTestTopology(kafkaZk);
		Config config = new Config();
		config.put(Config.TOPOLOGY_TRIDENT_BATCH_EMIT_INTERVAL_MILLIS, 2000);
		StormTopology stormTopology = kafkaSpoutTestTopology.buildTopology();
		String name = "Sample";
		String dockerIp = "192.168.1.193";
		config.setNumWorkers(2);
		config.setMaxTaskParallelism(5);
		config.put(Config.NIMBUS_HOST, dockerIp);
		config.put(Config.NIMBUS_THRIFT_PORT, 6627);
		config.put(Config.STORM_ZOOKEEPER_PORT, 2181);
		config.put(Config.STORM_ZOOKEEPER_SERVERS, Arrays.asList(dockerIp));
		// StormSubmitter.submitTopology(name, config, stormTopology);
		config.setNumWorkers(2);
		config.setMaxTaskParallelism(2);
		LocalCluster cluster = new LocalCluster();
		cluster.submitTopology("kafka", config, stormTopology);
		stormTopology.get_bolts().forEach((i, j) -> System.out.println("i -> " + i));
	}
}
