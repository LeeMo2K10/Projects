package com.spark.graphx;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.graphx.Edge;
import org.apache.spark.graphx.Graph;
import org.apache.spark.graphx.VertexRDD;
import org.apache.spark.storage.StorageLevel;

import scala.Predef;
import scala.Tuple2;
import scala.math.Ordering$;
import scala.reflect.ClassTag$;

public class UsingGraph implements Serializable {

	private static final long serialVersionUID = 1L;

	static Logger log = Logger.getLogger(ExampleApp.class);

	SparkConf conf = new SparkConf().setMaster("local").setAppName("PropertyGraph");
	JavaSparkContext jssc = new JavaSparkContext(conf);

	SparkContext sc = new SparkContext();

	@SuppressWarnings("unchecked")
	private void getComponents() {

		List<Tuple2<Object, String>> vertexlist = new ArrayList<Tuple2<Object, String>>();
		vertexlist.add(new Tuple2<Object, String>(1L, "BarackObama,Barack Obama"));
		vertexlist.add(new Tuple2<Object, String>(2L, "ladygaga,Goddess of Love"));

		vertexlist.add(new Tuple2<Object, String>(3L, "jeresig,John Resig"));

		vertexlist.add(new Tuple2<Object, String>(4l, "justinbieber,Justin Bieber"));

		vertexlist.add(new Tuple2<Object, String>(6L, "matei_zaharia,Matei Zaharia"));

		vertexlist.add(new Tuple2<Object, String>(7l, "odersky,Martin Odersky"));

		vertexlist.add(new Tuple2<Object, String>(8L, "anonsys"));

		JavaRDD vertexRdd = jssc.parallelize(vertexlist);

		List edgeList = new ArrayList();
		edgeList.add(new Edge(2, 1, 22));
		edgeList.add(new Edge(4, 1, 25));
		edgeList.add(new Edge(1, 2, 43));
		edgeList.add(new Edge(6, 3, 35));
		edgeList.add(new Edge(7, 3, 35));
		edgeList.add(new Edge(7, 6, 43));
		edgeList.add(new Edge(6, 7, 35));
		edgeList.add(new Edge(3, 7, 35));

		JavaRDD edgeRdd = jssc.parallelize(edgeList);

		Integer defaultuser = 11;

		Graph<Integer, Integer> graph1 = Graph.apply(vertexRdd.rdd(), edgeRdd.rdd(), defaultuser,
				StorageLevel.MEMORY_ONLY(), StorageLevel.MEMORY_ONLY(), ClassTag$.MODULE$.<Integer>apply(String.class),
				ClassTag$.MODULE$.<String>apply(String.class));

		Graph<Object, Object> graph = followerGraph.outerJoinVertices(users.rdd(), new VertexFunction1(),
				ClassTag$.MODULE$.apply(Object.class), ClassTag$.MODULE$.apply(Object.class),
				Predef.$eq$colon$eq$.MODULE$.<Object>tpEquals());

		Graph<Object, Object> subgraph = graph.subgraph(new EdgeFunction(), new VertexFunction());

		Graph<Object, Object> pageRankGraph = subgraph.ops().pageRank(0.001, 0.15);

		VertexRDD<Object> pageRdd = pageRankGraph.vertices();

		Graph<Object, Object> userInfoWithPageRank = subgraph.outerJoinVertices(pageRdd, new VertexFunction1(),
				ClassTag$.MODULE$.apply(Object.class), ClassTag$.MODULE$.apply(Object.class),
				Predef.$eq$colon$eq$.MODULE$.<Object>tpEquals());

		userInfoWithPageRank.vertices().top(5, Ordering$.MODULE$.by(new OrderFunction(), null));

	}

	public static void main(String[] args) {

		ExampleApp app = new ExampleApp();
		app.getComponents();
	}
}
