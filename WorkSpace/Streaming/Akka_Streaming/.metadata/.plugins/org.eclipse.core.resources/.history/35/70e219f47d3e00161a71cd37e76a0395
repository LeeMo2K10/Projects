package com.akka.stream;

import akka.NotUsed;
import akka.stream.FlowShape;
import akka.stream.UniformFanInShape;
import akka.stream.UniformFanOutShape;
import akka.stream.javadsl.Balance;
import akka.stream.javadsl.Flow;
import akka.stream.javadsl.GraphDSL;
import akka.stream.javadsl.Merge;

public class ParallelizedPipeliningApp {

	public void parellel() {

		Flow<ScoopOfBatter, HalfCookedPancake, NotUsed> fryingPan1 = Flow.of(ScoopOfBatter.class)
				.map(batter -> new HalfCookedPancake());

		Flow<HalfCookedPancake, Pancake, NotUsed> fryingPan2 = Flow.of(HalfCookedPancake.class)
				.map(halfCooked -> new Pancake());

		Flow<ScoopOfBatter, HalfCookedPancake, NotUsed> pancakeChefs1 = Flow.fromGraph(GraphDSL.create(b -> {
			final UniformFanInShape<HalfCookedPancake, HalfCookedPancake> mergeHalfCooked = b.add(Merge.create(2));
			final UniformFanOutShape<ScoopOfBatter, ScoopOfBatter> dispatchBatter = b.add(Balance.create(2));

			// Two chefs work with one frying pan for each, half-frying the
			// pancakes then putting
			// them into a common pool
			b.from(dispatchBatter.out(0)).via(b.add(fryingPan1.async())).toInlet(mergeHalfCooked.in(0));
			b.from(dispatchBatter.out(1)).via(b.add(fryingPan1.async())).toInlet(mergeHalfCooked.in(1));

			return FlowShape.of(dispatchBatter.in(), mergeHalfCooked.out());
		}));
		
		

	}

}
