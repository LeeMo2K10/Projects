package com.akka.stream.Source;

import java.util.*;
import akka.NotUsed;
import akka.actor.ActorSystem;
import akka.event.Logging;
import akka.event.LoggingAdapter;
import akka.japi.*;
import akka.japi.function.Creator;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.javadsl.Sink;
import akka.stream.javadsl.Source;
import scala.concurrent.Future;

public class FromApp {

	ActorSystem system = ActorSystem.create("Pipelining");
	Materializer mat = ActorMaterializer.create(system);

	LoggingAdapter log = Logging.getLogger(system, this);

	public void from() {
		Creator<Iterator<Integer>> creator = new Creator<Iterator<Integer>>() {

			public Iterator<Integer> create() throws Exception {
				Iterable<Integer> input = Arrays.asList(1, 2, 3, 4, 5);
				return input.iterator();
			}
		};
		Iterable<Integer> input = Arrays.asList(1, 2, 3, 4, 5);

		Source.fromIterator(input).runWith(Sink.foreach(i -> log.debug("" + i)), mat);

		Source.from(arg0)
	}

	public static void main(String[] args) {

		FromApp app = new FromApp();
		app.from();
	}

}
