package com.akka.stream.Source;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import akka.NotUsed;
import akka.actor.ActorSystem;
import akka.event.Logging;
import akka.event.LoggingAdapter;
import akka.japi.Creator;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.javadsl.Source;
import akka.stream.scaladsl.Sink;
import scala.concurrent.Future;

public class FromIteratorApp {

	ActorSystem system = ActorSystem.create("Pipelining");
	Materializer mat = ActorMaterializer.create(system);

	LoggingAdapter log = Logging.getLogger(system, this);

	public void iterate() {

		Creator<Iterator<Integer>> creator = new Creator<Iterator<Integer>>() {

			@Override
			public Iterator<Integer> create() throws Exception {

				Iterable<Integer> input = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);
				return input.iterator();
			}

		};


		Source<Integer, NotUsed> source = Source.fromIterator(() -> data.iterator());

	}

	public static void main(String[] args) {

		FromIteratorApp app = new FromIteratorApp();
		app.iterate();
	}

}
