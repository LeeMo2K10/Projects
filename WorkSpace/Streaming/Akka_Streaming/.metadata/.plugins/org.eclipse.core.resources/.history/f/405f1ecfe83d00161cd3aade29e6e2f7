package com.akka.stream;

import akka.NotUsed;
import akka.actor.ActorSystem;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.javadsl.Flow;

public class ParallelProcessing {

	ActorSystem system = ActorSystem.create("Pipelining");
	Materializer mat = ActorMaterializer.create(system);

	public void pipeline() {

		Flow<ScoopOfBatter, Pancake, NotUsed> fryingPan1 = Flow.of(ScoopOfBatter.class)
				.map(batter -> new Pancake());
		Flow<ScoopOfBatter, Pancake, NotUsed> pancakeChef =
				  Flow.fromGraph(GraphDSL.create(b -> {
				    final UniformFanInShape<Pancake, Pancake> mergePancakes =
				      b.add(Merge.create(2));
				    final UniformFanOutShape<ScoopOfBatter, ScoopOfBatter> dispatchBatter =
				      b.add(Balance.create(2));
				    b.from(dispatchBatter.out(0)).via(b.add(fryingPan.async())).toInlet(mergePancakes.in(0));
				    b.from(dispatchBatter.out(1)).via(b.add(fryingPan.async())).toInlet(mergePancakes.in(1));

				 
	}

}
