package com.akka.reactiveStreams;

import org.reactivestreams.Publisher;
import org.reactivestreams.Subscriber;

import com.akka.externalserveices.Author;
import com.akka.externalserveices.Hashtag;
import com.akka.externalserveices.RS;
import com.akka.externalserveices.Tweet;

import akka.NotUsed;
import akka.actor.ActorSystem;
import akka.event.Logging;
import akka.event.LoggingAdapter;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.javadsl.Flow;
import akka.stream.javadsl.Sink;
import akka.stream.javadsl.Source;
import akka.testkit.TestProbe;

public class FlowStream {

	ActorSystem system = ActorSystem.create("External");

	final TestProbe probe = new TestProbe(system);
	Materializer mat = ActorMaterializer.create(system);

	LoggingAdapter log = Logging.getLogger(system, this);
	public static final Hashtag AKKA = new Hashtag("#akka");

	public void flow(){
	
		RS rs= new RS() {
			
			@Override
			public Publisher<Tweet> tweets() {
				return null;
			}
			
			@Override
			public Subscriber<Author> storage() {
				return null;
			}
			
			@Override
			public Subscriber<Author> alert() {
				return null;
			}
		};
	final Flow<Tweet, Author, NotUsed> authors = Flow.of(Tweet.class)
			  .filter(t -> t.hashtags().contains(AKKA))
			  .map(t -> t.author);
			 
			  Source.fromPublisher(rs.tweets())
			    .via(authors)
			    .to(Sink.fromSubscriber(rs.storage()));
	}
}
