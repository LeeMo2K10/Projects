package com.akka.stream;

import java.util.concurrent.CompletionStage;
import java.util.concurrent.ConcurrentLinkedQueue;

import akka.NotUsed;
import akka.actor.ActorSystem;
import akka.event.Logging;
import akka.event.LoggingAdapter;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import akka.stream.javadsl.Flow;
import akka.stream.javadsl.Framing;
import akka.stream.javadsl.FramingTruncation;
import akka.stream.javadsl.Source;
import akka.stream.javadsl.Tcp;
import akka.stream.javadsl.Tcp.IncomingConnection;
import akka.stream.javadsl.Tcp.OutgoingConnection;
import akka.stream.javadsl.Tcp.ServerBinding;
import akka.util.ByteString;

public class AvoidingDeadLocks {

	ActorSystem system = ActorSystem.create("ConnectingReplClient");

	Materializer mat = ActorMaterializer.create(system);

	LoggingAdapter log = Logging.getLogger(system, this);

	public void accept() {
		
		
		Source<IncomingConnection, CompletionStage<ServerBinding>> connections = Tcp.get(system).bind("localhost",
				8809);

		
	connections.runForeach(connection -> {

		 final Flow<String, String, NotUsed> commandParser =
			      Flow.<String>create()
			        .takeWhile(elem -> !elem.equals("BYE"))
			        .map(elem -> elem + "!");

		final Flow<ByteString, ByteString, NotUsed> repl = Flow.of(ByteString.class)
				.via(Framing.delimiter(ByteString.fromString("\n"), 256, FramingTruncation.DISALLOW))
				.map(ByteString::utf8String).map(text -> {
					System.out.println("Server: " + text);
					return "next";
				}).map(elem -> readLine("> ")).via(replParser);

		CompletionStage<OutgoingConnection> result = connection.join(repl).run(mat);
		result.thenAcceptAsync(f -> {

			log.info("" + f);

		});
		
		
	});

	}

	private final ConcurrentLinkedQueue<String> input = new ConcurrentLinkedQueue<String>();
	{
		input.add("Hello world");
		input.add("What a lovely day");
		input.add("Hello world");
		input.add("What a lovely day");
		
	}

	private String readLine(String prompt) {
		String s = input.poll();
		return (s == null ? "q" : s);
	}

	public static void main(String[] args) {
		AvoidingDeadLocks con = new AvoidingDeadLocks();
		con.accept();

	}

}
