package com.akka.distribute;

import java.util.concurrent.TimeUnit;

import akka.actor.AbstractActor;
import akka.actor.ActorRef;
import akka.actor.ActorSystem;
import akka.actor.Cancellable;
import akka.cluster.Cluster;
import akka.cluster.ddata.DistributedData;
import akka.cluster.ddata.Flag;
import akka.cluster.ddata.FlagKey;
import akka.cluster.ddata.GSet;
import akka.cluster.ddata.GSetKey;
import akka.cluster.ddata.Key;
import akka.cluster.ddata.ORSet;
import akka.cluster.ddata.ORSetKey;
import akka.cluster.ddata.PNCounter;
import akka.cluster.ddata.PNCounterKey;
import akka.cluster.ddata.Replicator;
import akka.cluster.ddata.Replicator.Changed;
import akka.cluster.ddata.Replicator.Subscribe;
import akka.cluster.ddata.Replicator.Update;
import akka.cluster.ddata.Replicator.UpdateResponse;
import akka.event.Logging;
import akka.event.LoggingAdapter;
import akka.japi.pf.ReceiveBuilder;
import scala.concurrent.duration.Duration;
import scala.concurrent.forkjoin.ThreadLocalRandom;

public class DataBot extends AbstractActor {

	LoggingAdapter log = Logging.getLogger(getContext().system(), this);
	ActorSystem system = ActorSystem.create("ClusterSystem");
	final ActorRef replicator = DistributedData.get(system).replicator();
	final Cluster node = Cluster.get(system);

	final Key<PNCounter> counter = PNCounterKey.create("");
	final Key<GSet<String>> set1 = GSetKey.create("set1");
	final Key<ORSet<String>> set2 = ORSetKey.create("Orset");
	final Key<Flag> activeFlag = FlagKey.create("active");

}
