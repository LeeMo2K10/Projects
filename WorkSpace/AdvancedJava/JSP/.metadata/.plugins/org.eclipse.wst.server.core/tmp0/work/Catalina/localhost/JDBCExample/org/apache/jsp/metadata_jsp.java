/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.67
 * Generated at: 2016-01-25 09:46:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import java.lang.reflect.*;

public final class metadata_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

/**
		* Formats an object in an HTML-friendly way,
		* making sure it doesn't exceed 48 characters
		* in width.
		*/
	private static String formatLine(Object obj) {
		if (obj == null)
			return "";
		StringBuffer out = new StringBuffer();
		StringBuffer line = new StringBuffer();
		StringTokenizer st = new StringTokenizer(obj.toString(), ",;", true);
		while (st.hasMoreTokens()) {
			if (line.length() > 48) {
				out.append(line.toString());
				out.append("<BR>");
				line = new StringBuffer();
			}
			line.append(st.nextToken());
		}
		out.append(line.toString());
		return out.toString();
	}
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	String driverName = request.getParameter("driverName");
	if (driverName == null)
		driverName = "";
	driverName = driverName.trim();
	if (driverName.equals(""))
		throw new ServletException("No driverName parameter");
	// Get required database URL parameter
	String url = request.getParameter("url");
	if (url == null)
		url = "";
	url = url.trim();
	if (url.equals(""))
		throw new ServletException("No url parameter");
	// Get optional userID parameter
	String userID = request.getParameter("userID");
	if (userID == null)
		userID = "";
	userID = userID.trim();
	// Get optional password parameter
	String password = request.getParameter("password");
	if (password == null)
		password = "";
	password = password.trim();
	// Load the driver
	Class.forName(driverName);
	Connection con = null;
	try {
		// Open the database connection and get the metadata
		con = DriverManager.getConnection(url, userID, password);
		DatabaseMetaData md = con.getMetaData();
		/*
		Use reflection to get a list of methods that the
		metadata class supports. Select only public methods
		that take no parameters and that return either
		a string or a boolean.*/
		Class mdclass = md.getClass();
		Method[] methods = mdclass.getDeclaredMethods();
		Map methodMap = new TreeMap();
		for (int i = 0; i < methods.length; i++) {
			Method method = methods[i];
			// Public methods only
			if (!Modifier.isPublic(method.getModifiers()))
				continue;
			// with no parameters
			if (method.getParameterTypes().length > 0)
				continue;
			// that return String or boolean

			Class returnType = method.getReturnType();
			if ((returnType != java.lang.Boolean.TYPE) && (returnType != java.lang.String.class))
				continue;
			// Add selected methods to sorted map
			methodMap.put(method.getName(), method);
		}
		int row = 0;
		Iterator im = methodMap.keySet().iterator();
		while (im.hasNext()) {
			String methodName = (String) im.next();
			Object methodValue = null;
			Method method = (Method) methodMap.get(methodName);
			// Invoke the method and get the result

      out.write("\n");
      out.write("<HTML>\n");
      out.write("<HEAD>\n");
      out.write("<TITLE>Metadata Explorer</TITLE>\n");
      out.write("<LINK REL=\"stylesheet\" HREF=\"style.css\">\n");
      out.write("</HEAD>\n");
      out.write("<BODY>\n");
      out.write("\n");
      out.write("\t<H3>\n");
      out.write("\t\tMetadata Explorer for\n");
      out.write("\t\t");
      out.print(md.getDatabaseProductName());
      out.write('\n');
      out.write('	');
      out.write('	');
      out.print(md.getDatabaseProductVersion());
      out.write("\n");
      out.write("\t\t<BR> [");
      out.print(driverName);
      out.write("]\n");
      out.write("\t</H3>\n");
      out.write("\t<TABLE>\n");
      out.write("\t\t<TR CLASS=\"header\">\n");
      out.write("\t\t\t<TH CLASS=\"header\">Method</TH>\n");
      out.write("\t\t\t<TH CLASS=\"header\">Value</TH>\n");
      out.write("\t\t</TR>\n");
      out.write("\n");
      out.write("\t\t");

			//Generate the table
					row = 0;
					im = methodMap.keySet().iterator();
					while (im.hasNext()) {
						methodName = (String) im.next();
						methodValue = null;
						method = (Method) methodMap.get(methodName);
						// Invoke the method and get the result
						try {
							Object[] noParameters = new Object[0];
							methodValue = method.invoke(md, noParameters);
						} catch (Exception ignore) {
						}
						// Display the results
						row++;
						String rowClass = "row" + (row % 2);
		
      out.write("\n");
      out.write("\t\t<TR CLASS=\"");
      out.print(rowClass);
      out.write("\">\n");
      out.write("\t\t\t<TD>");
      out.print(methodName);
      out.write("</TD>\n");
      out.write("\t\t\t<TD>");
      out.print(formatLine(methodValue));
      out.write("</TD>\n");
      out.write("\t\t</TR>\n");
      out.write("\t\t");

			}
				}
			} finally {
				if (con != null)
					con.close();
			}
		
      out.write("\n");
      out.write("\t</TABLE>\n");
      out.write("\n");
      out.write("</BODY>\n");
      out.write("</HTML>\n");
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
