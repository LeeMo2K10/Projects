package com.myudfs;

import java.io.IOException;
import java.util.Iterator;

import org.apache.pig.Algebraic;
import org.apache.pig.EvalFunc;
import org.apache.pig.PigException;
import org.apache.pig.backend.executionengine.ExecException;
import org.apache.pig.builtin.AlgebraicBigDecimalMathBase.Final;
import org.apache.pig.data.DataBag;
import org.apache.pig.data.Tuple;
import org.apache.pig.data.TupleFactory;

public class COUNT extends EvalFunc<Long> implements Algebraic {
	private static TupleFactory mTupleFactory = TupleFactory.getInstance();

	@Override
	public Long exec(Tuple input) throws IOException {
		try {
			DataBag bag = (DataBag) input.get(0);
			if (bag == null)
				return null;

			Iterator it = bag.iterator();
			long cnt = 0;
			while (it.hasNext()) {
				Tuple t = (Tuple) it.next();
				if (t != null && t.size() > 0 && t.get(0) != null)
					cnt++;
			}
			return cnt;
		} catch (ExecException ee) {
			throw ee;
		} catch (Exception e) {
			int errCode = 2106;
			String msg = "Error while computing count in " + this.getClass().getSimpleName();
			throw new ExecException(msg, errCode, PigException.BUG, e);
		}
	}

	public String getInitial() {
		return Initial.class.getName();
	}

	public String getIntermed() {
		return Intermediate.class.getName();
	}

	public String getFinal() {
		return Final.class.getName();
	}

	static public class Initial extends EvalFunc<Tuple> {

		@Override
		public Tuple exec(Tuple input) throws IOException {
			DataBag bag = (DataBag) input.get(0);
			Iterator it = bag.iterator();
			if (it.hasNext()) {
				Tuple t = (Tuple) it.next();
				if (t != null && t.size() > 0 && t.get(0) != null)
					return mTupleFactory.newTuple(Long.valueOf(1));
			}
			return mTupleFactory.newTuple(Long.valueOf(0));
		}
	}

	static public class Intermediate extends EvalFunc<Tuple> {

		@Override
		public Tuple exec(Tuple input) throws IOException {
			try {
				return mTupleFactory.newTuple(sum(input));
			} catch (ExecException ee) {
				
			} catch (Exception e) {
				String msg = "Error while computing count in " + this.getClass().getSimpleName();
				throw new ExecException(msg, errCode, PigException.BUG, e);
			}
		}

		static public class Final extends EvalFunc<Long> {
			@Override
			public Long exec(Tuple input) throws IOException {
				try {
					return sum(input);
				} catch (Exception ee) {
					int errCode = 2106;
					String msg = "Error while computing count in " + this.getClass().getSimpleName();
					throw new ExecException(msg, errCode, PigException.BUG, ee);
				}

			}

			static protected Long sum(Tuple input) throws ExecException, NumberFormatException {
				DataBag values = (DataBag) input.get(0);
				long sum = 0;
				for (Iterator<Tuple> it = values.iterator(); it.hasNext();) {
					Tuple t = it.next();
					sum += (Long) t.get(0);
				}
				return sum;
			}
		}

	}
}
