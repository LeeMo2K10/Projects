package com.tez;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import org.apache.tez.mapreduce.processor.SimpleMRProcessor;
import org.apache.tez.runtime.api.ProcessorContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JoinDataProcessor extends SimpleMRProcessor {
	public static Logger logger = LoggerFactory.getLogger(JoinDataProcessor.class);
	long streamOutputFileSize;
	long hashOutputFileSize;
	float overlapApprox = 0.2f;
	private static final String STREAM_OUTPUT_NAME = "streamoutput";
	private static final String HASH_OUTPUT_NAME = "hashoutput";
	private static final String EXPECTED_OUTPUT_NAME = "expectedoutput";

	public JoinDataProcessor(ProcessorContext context) {
		super(context);

	}

	public static byte[] createConfiguration(long streamOutputFileSize, long hashOutputFileSize) throws IOException {
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		DataOutputStream dos = new DataOutputStream(bos);
		dos.writeLong(streamOutputFileSize);
		dos.writeLong(hashOutputFileSize);
		dos.close();
		bos.close();
		return bos.toByteArray();
	}

	@Override
	public void initialize() throws Exception {
		byte[] payload = getContext().getUserPayload().deepCopyAsArray();
		ByteArrayInputStream bis = new ByteArrayInputStream(payload);
		DataInputStream dis = new DataInputStream(bis);
		streamOutputFileSize = dis.readLong();
		hashOutputFileSize = dis.readLong();
		logger.info("Initialized with largeFileTargetSize=" + streamOutputFileSize + ", smallFileTragetSize="
				+ hashOutputFileSize);
		dis.close();
		bis.close();
	}

	@Override
	public void run() throws Exception {

	}

}
