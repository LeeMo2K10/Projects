package com.tez.examples;

import java.util.HashSet;
import java.util.Set;

import org.apache.hadoop.io.Text;
import org.apache.tez.mapreduce.processor.SimpleMRProcessor;
import org.apache.tez.runtime.api.LogicalInput;
import org.apache.tez.runtime.api.LogicalOutput;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.api.Reader;
import org.apache.tez.runtime.library.api.KeyValueReader;
import org.apache.tez.runtime.library.api.KeyValueWriter;

import com.google.common.base.Preconditions;

public class HashJoinProcessor extends SimpleMRProcessor {
	private static final String broadcastOption = "doBroadcast";
	private static final String streamingSide = "streamingSide";
	private static final String hashSide = "hashSide";
	private static final String inputFile = "inputFile";
	private static final String joiner = "joiner";
	private static final String joinOutput = "joinOutput";

	public HashJoinProcessor(ProcessorContext context) {
		super(context);

	}

	@Override
	public void run() throws Exception {
		Preconditions.checkState(getInputs().size() == 1);
		Preconditions.checkState(getOutputs().size() == 1);
		LogicalInput streamInput = getInputs().get(streamingSide);
		LogicalInput hashInput = getInputs().get(hashSide);
		Reader streamReader = streamInput.getReader();
		Reader hashReader = hashInput.getReader();
		Preconditions.checkState(streamReader instanceof KeyValueReader);
		Preconditions.checkState(hashReader instanceof KeyValueReader);
		LogicalOutput output = getOutputs().get(joinOutput);
		
		KeyValueReader hashKVReader = (KeyValueReader) hashReader;
		KeyValueReader streamKVReader = (KeyValueReader) streamReader;
		Preconditions.checkState(output.getWriter() instanceof KeyValueWriter);

		KeyValueWriter KVWriter = (KeyValueWriter) output.getWriter();
		Set<Text> keySet=new HashSet<Text>();
		
		while(hashKVReader.next()){
		keySet.add(new Text((Text)hashKVReader.getCurrentKey());	 
		}

	}

}
