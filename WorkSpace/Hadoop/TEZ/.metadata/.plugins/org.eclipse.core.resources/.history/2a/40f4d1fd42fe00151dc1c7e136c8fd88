package com.tez;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.Map;
import java.util.TreeMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileAlreadyExistsException;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapred.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.yarn.api.records.LocalResource;
import org.apache.tez.client.TezClient;
import org.apache.tez.dag.api.DAG;
import org.apache.tez.dag.api.DataSinkDescriptor;
import org.apache.tez.dag.api.DataSourceDescriptor;
import org.apache.tez.dag.api.InputDescriptor;
import org.apache.tez.dag.api.TezConfiguration;
import org.apache.tez.dag.api.TezException;
import org.apache.tez.dag.api.UserPayload;
import org.apache.tez.dag.api.client.DAGClient;
import org.apache.tez.dag.api.client.DAGStatus;
import org.apache.tez.mapreduce.input.MRInput;
import org.apache.tez.mapreduce.output.MROutput;

public class WordCount extends Configured implements Tool {

	public int run(String[] args) throws Exception {
		System.out.println("Running WordCount");

		Configuration conf = getConf();
		String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();

		if (otherArgs.length != 2) {
			printUsage();
			return 2;
		}
		WordCount job = new WordCount();
		job.run(otherArgs[0], otherArgs[1], conf);
		return 0;
	}

	private boolean run(String inputPath, String outputPath, Configuration conf)
			throws IOException, TezException, InterruptedException {
		System.out.println("Running WordCount");
		TezConfiguration tezConf;
		if (conf != null) {
			tezConf = new TezConfiguration(conf);
		} else {
			tezConf = new TezConfiguration();

		}
		UserGroupInformation.setConfiguration(tezConf);
		String user = UserGroupInformation.getCurrentUser().getShortUserName();
		FileSystem fs = FileSystem.get(tezConf);
		String stagingDirStr = Path.SEPARATOR + "user" + Path.SEPARATOR + user + Path.SEPARATOR + ".staging"
				+ Path.SEPARATOR + Path.SEPARATOR + Long.toString(System.currentTimeMillis());
		Path stagingDir = new Path(stagingDirStr);
		tezConf.set(TezConfiguration.TEZ_AM_STAGING_DIR, stagingDirStr);
		stagingDir = fs.makeQualified(stagingDir);
		TezClient tezSession = TezClient.create("WordCountSession", tezConf);
		tezSession.start();

		DAGClient dagClient = null;
		try {
			if (fs.exists(new Path(outputPath))) {
				throw new FileAlreadyExistsException("Output directory " + outputPath + " already exists");
			}

			Map<String, LocalResource> localResources = new TreeMap<String, LocalResource>();
			DAG dag = createDAG(fs, tezConf, localResources, stagingDir, inputPath, outputPath);
			tezSession.waitTillReady();
			dagClient = tezSession.submitDAG(dag);

			// monitoring
			DAGStatus dagStatus = dagClient.waitForCompletionWithStatusUpdates(null);
			if (dagStatus.getState() != DAGStatus.State.SUCCEEDED) {
				System.out.println("DAG diagnostics: " + dagStatus.getDiagnostics());
				return false;
			}
			return true;
		} finally {
			fs.delete(stagingDir, true);
			tezSession.stop();
		}
	}

	private DAG createDAG(FileSystem fs, TezConfiguration tezConf, Map<String, LocalResource> localResources,
			Path stagingDir, String inputPath, String outputPath) {
		Configuration inputConf = new Configuration(tezConf);
		inputConf.set(FileInputFormat.INPUT_DIR, inputPath);
		/*
		 * InputDescriptor id = new InputDescriptor(MRInput.class.getName())
		 * .setUserPayload(MRInput.createUserPayload(inputConf,
		 * TextInputFormat.class.getName(), true, true));
		 */
		DataSourceDescriptor dataSource = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, inputPath).build();

		Configuration outputConf = new Configuration(tezConf);
		/*
		 * outputConf.set(FileOutputFormat.OUTDIR, outputPath); OutputDescriptor
		 * od = new OutputDescriptor(MROutput.class.getName())
		 * .setUserPayload(MROutput.createUserPayload( outputConf,
		 * TextOutputFormat.class.getName(), true));
		 */
		DataSinkDescriptor dataSink = MROutput
				.createConfigBuilder(new Configuration(tezConf), TextOutputFormat.class, outputPath).build();
		return null;
	}

	private UserPayload createPayload(int num) throws IOException {
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		DataOutputStream dos = new DataOutputStream(bos);
		dos.writeInt(num);
		dos.close();
		bos.close();
		ByteBuffer buffer = ByteBuffer.wrap(bos.toByteArray());
		return UserPayload.create(buffer);
	}

	private static void printUsage() {
		System.err.println("Usage: " + " wordcount <in1> <out1>");
		ToolRunner.printGenericCommandUsage(System.err);
	}

}
