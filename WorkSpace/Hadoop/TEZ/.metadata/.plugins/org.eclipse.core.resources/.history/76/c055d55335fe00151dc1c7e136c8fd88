package com.tez.topk;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.mapred.InputFormat;
import org.apache.hadoop.mapred.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.tez.client.TezClient;
import org.apache.tez.dag.api.DAG;
import org.apache.tez.dag.api.DataSinkDescriptor;
import org.apache.tez.dag.api.DataSourceDescriptor;
import org.apache.tez.dag.api.ProcessorDescriptor;
import org.apache.tez.dag.api.TezConfiguration;
import org.apache.tez.dag.api.UserPayload;
import org.apache.tez.dag.api.Vertex;
import org.apache.tez.dag.api.client.DAGClient;
import org.apache.tez.dag.api.client.DAGStatus;
import org.apache.tez.mapreduce.input.MRInput;
import org.apache.tez.mapreduce.output.MROutput;

public class TopK extends Configured implements Tool {
	private static final String INPUT = "input";
	private static final String WRITER = "writer";
	private static final String OUTPUT = "output";
	private static final String TOKENIZER = "tokenizer";
	private static final String SUM = "sum";

	public int run(String[] args) throws Exception {
		Configuration conf = getConf();
		TopK job = new TopK();
		if (args.length < 3) {
			printUsage();
			return 2;
		}
		if (job.run(args[0], args[1], args[2], args.length > 3 ? args[3] : "1", args.length > 4 ? args[4] : "1",
				conf)) {
			return 0;
		}
		return 1;
	}

	private static void printUsage() {
		System.err.println(
				"Usage: topk <inputPath> <outputPath> <columnIndex, starting from 0> <K, -1 to all> <partition, default: 1>");
		ToolRunner.printGenericCommandUsage(System.err);
	}

	private boolean run(String inputPath, String outputPath, String columnIndex, String top, String numPartitions,
			Configuration conf) throws Exception {
		TezConfiguration tezConf;
		if (conf != null) {
			tezConf = new TezConfiguration(conf);
		} else {
			tezConf = new TezConfiguration();
		}
		UserGroupInformation.setConfiguration(tezConf);
		TezClient tclient = TezClient.create("TopK", tezConf);
		tclient.start();
		try {
			DAG dag = createDAG(tezConf, inputPath, outputPath, columnIndex, top, numPartitions);
			tclient.waitTillReady();
			DAGClient dagClient = tclient.submitDAG(dag);
			DAGStatus dagStatus = dagClient.waitForCompletionWithStatusUpdates(null);
			if (dagStatus.getState() != DAGStatus.State.SUCCEEDED) {
				System.out.println("TopK failed with diagnostics: " + dagStatus.getDiagnostics());
				return false;
			}
			return true;
		} finally {
			tclient.stop();
		}
	}

	@SuppressWarnings("unused")
	private DAG createDAG(TezConfiguration tezConf, String inputPath, String outputPath, String columnIndex, String top,
			String numPartitions) throws NumberFormatException, IOException {

		DataSourceDescriptor dataSource = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, inputPath).build();
		DataSinkDescriptor dataSink = MROutput
				.createConfigBuilder(new Configuration(tezConf), TextOutputFormat.class, outputPath).build();
		Vertex tokenizerVertex = Vertex
				.create(TOKENIZER,
						ProcessorDescriptor.create(TokenProcessor.class.getName())
								.setUserPayload(createPayload(Integer.valueOf(columnIndex))))
				.addDataSource(INPUT, dataSource);
		int topK = Integer.valueOf(top);
		Vertex sumVertex = Vertex.create(SUM,
				ProcessorDescriptor.create(SumProcessor.class.getName()).setUserPayload(createPayload(topK)),
				Integer.valueOf(numPartitions));
		Vertex writerVertex = Vertex.create(WRITER,
				ProcessorDescriptor.create(Writer.class.getName()).setUserPayload(createPayload(topK)), 1)
				.addDataSink(OUTPUT, dataSink);

		return null;
	}

	private UserPayload createPayload(int num) throws IOException {
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		DataOutputStream dos = new DataOutputStream(bos);
		dos.writeInt(num);
		dos.close();
		bos.close();
		ByteBuffer buffer = ByteBuffer.wrap(bos.toByteArray());
		return UserPayload.create(buffer);
	}
}
