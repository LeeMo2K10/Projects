package com.tez.topk;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.tez.mapreduce.processor.SimpleMRProcessor;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValuesReader;
import org.apache.tez.runtime.library.api.KeyValuesWriter;

import com.google.common.base.Preconditions;

public class SumProcessor extends SimpleMRProcessor {
	private static final String INPUT = "input";
	private static final String WRITER = "writer";
	private static final String OUTPUT = "output";
	private static final String TOKENIZER = "tokenizer";
	private static final String SUM = "sum";

	private Text word = new Text();

	public SumProcessor(ProcessorContext context) {
		super(context);

	}
	public void initialize() throws Exception { 
        byte[] payload = getContext().getUserPayload().deepCopyAsArray(); 
        ByteArrayInputStream bis = new ByteArrayInputStream(payload); 
        DataInputStream dis = new DataInputStream(bis); 
        // store the local top K result 
        localTop = new LocalTop(dis.readInt()); 
        dis.close(); 
        bis.close(); 
    } 
	@Override
	public void run() throws Exception {
		Preconditions.checkArgument(getInputs().size() == 1);
		Preconditions.checkArgument(getOutputs().size() == 1);
		KeyValuesWriter kWriter = (KeyValuesWriter) getOutputs().get(OUTPUT).getWriter();
		KeyValuesReader kReader = (KeyValuesReader) getInputs().get(TOKENIZER).getReader();
		while (kReader.next()) {
			Text currentvalue = (Text) kReader.getCurrentKey();
			int sum = 0;
			for (Object values : kReader.getCurrentValues()) {
				sum += ((IntWritable) values).get();
			}
		}
	}

}
